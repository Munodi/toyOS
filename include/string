#pragma once

#include <cstdlib>
#include <cstring>

namespace std
{
	class string
	{
		public:
			static const size_t npos = -1;
			
			explicit string() : _size(0), capacity(0), data(new char[1])
			{
				*data = '\0';
			}
			string(const char* s)
			{
				_size = strlen(s);
				capacity = _size;
				data = new char[capacity + 1];
				strcpy(data, s);
			}
			string(const string& other)
			{
				_size = other._size;
				capacity = other.capacity;
				data = new char[capacity + 1];
				strcpy(data, other.data);
			}
			string& operator=(const string& str)
			{
				if(this == &str)	// self-assignment check
					return *this;
				
				delete[] data;
				_size = str._size;
				capacity = str.capacity;
				data = new char[capacity + 1];
				strcpy(data, str.data);
				
				return *this;
			}
			
			~string()
			{
				delete[] data;
			}
			
			string& append(const char* s)
			{
				//asm volatile("xchgw %bx, %bx");
				size_t sLength = strlen(s);
				// grow capacity if need be
				if(capacity + 1 < _size + sLength + 1)
				{
					capacity = _size + sLength;
					char *newData = new char[capacity + 1];
					strcpy(newData, data);
					delete[] data;
					data = newData;
				}
				// add s to string
				strcpy(data + _size, s);
				_size += sLength;
				
				return *this;
			}
			
			const char* c_str() const
			{
				return data;
			}

			std::size_t size() const
			{
				return _size;
			}
		private:
			std::size_t _size, capacity;
			char* data;
	};
}   // namespace std

inline bool operator==(const std::string& lhs, const std::string& rhs)
{
	return lhs.size() == rhs.size() && std::strcmp(lhs.c_str(), rhs.c_str()) == 0;
}